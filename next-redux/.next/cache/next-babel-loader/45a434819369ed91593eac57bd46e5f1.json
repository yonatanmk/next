{"ast":null,"code":"var _jsxFileName = \"/Users/yonatanmk/projects/next/next-mobx/pages/_app.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\nimport App from \"next/app\";\nimport { store, StoreProvider, StoreContext } from \"../stores\";\n\nclass AppWrapper extends App {\n  // static async getInitialProps(appContext) {\n  //   console.log(\"getInitialProps ------------\");\n  //   // On server-side, this runs once and creates new stores\n  //   // On client-side, this always reuses existing stores\n  //   // const mobxStores = getStores();\n  //   // Make stores available to page's `getInitialProps`\n  //   appContext.ctx.store = store;\n  //   // Call \"super\" to run page's `getInitialProps`\n  //   const appProps = await App.getInitialProps(appContext);\n  //   // Gather serialization-friendly data from stores\n  //   // const initialData = {\n  //   //   postStoreInitialData: mobxStores.postStore.__data(),\n  //   // };\n  //   // Send it to `render`\n  //   // return {\n  //   //   ...appProps,\n  //   //   initialData,\n  //   // };\n  //   return store;\n  // }\n  render() {\n    const {\n      Component,\n      pageProps,\n      initialData\n    } = this.props; // During SSR, this will create new store instances so having `initialData` is crucial.\n    // During the client-side hydration, same applies.\n    // From then on, calls to `getStores()` return existing instances.\n    // const stores = getStores(initialData);\n\n    return __jsx(StoreContext.Provider, {\n      value: store,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 7\n      }\n    }, __jsx(Component, _extends({}, pageProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }\n    }))); // return (\n    //   <StoreProvider>\n    //     <Component {...pageProps} />\n    //   </StoreProvider>\n    // );\n  }\n\n}\n\nexport default AppWrapper;","map":{"version":3,"sources":["/Users/yonatanmk/projects/next/next-mobx/pages/_app.js"],"names":["React","App","store","StoreProvider","StoreContext","AppWrapper","render","Component","pageProps","initialData","props"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,UAAhB;AAEA,SAASC,KAAT,EAAgBC,aAAhB,EAA+BC,YAA/B,QAAmD,WAAnD;;AAEA,MAAMC,UAAN,SAAyBJ,GAAzB,CAA6B;AAC3B;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAK,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,SAAF;AAAaC,MAAAA,SAAb;AAAwBC,MAAAA;AAAxB,QAAwC,KAAKC,KAAnD,CADO,CAGP;AACA;AACA;AACA;;AAEA,WACE,MAAC,YAAD,CAAc,QAAd;AAAuB,MAAA,KAAK,EAAER,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,SAAD,eAAeM,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADF,CADF,CARO,CAcP;AACA;AACA;AACA;AACA;AACD;;AA7C0B;;AAgD7B,eAAeH,UAAf","sourcesContent":["import React from \"react\";\nimport App from \"next/app\";\n\nimport { store, StoreProvider, StoreContext } from \"../stores\";\n\nclass AppWrapper extends App {\n  // static async getInitialProps(appContext) {\n  //   console.log(\"getInitialProps ------------\");\n  //   // On server-side, this runs once and creates new stores\n  //   // On client-side, this always reuses existing stores\n  //   // const mobxStores = getStores();\n\n  //   // Make stores available to page's `getInitialProps`\n  //   appContext.ctx.store = store;\n\n  //   // Call \"super\" to run page's `getInitialProps`\n  //   const appProps = await App.getInitialProps(appContext);\n\n  //   // Gather serialization-friendly data from stores\n  //   // const initialData = {\n  //   //   postStoreInitialData: mobxStores.postStore.__data(),\n  //   // };\n\n  //   // Send it to `render`\n  //   // return {\n  //   //   ...appProps,\n  //   //   initialData,\n  //   // };\n  //   return store;\n  // }\n\n  render() {\n    const { Component, pageProps, initialData } = this.props;\n\n    // During SSR, this will create new store instances so having `initialData` is crucial.\n    // During the client-side hydration, same applies.\n    // From then on, calls to `getStores()` return existing instances.\n    // const stores = getStores(initialData);\n\n    return (\n      <StoreContext.Provider value={store}>\n        <Component {...pageProps} />\n      </StoreContext.Provider>\n    );\n\n    // return (\n    //   <StoreProvider>\n    //     <Component {...pageProps} />\n    //   </StoreProvider>\n    // );\n  }\n}\n\nexport default AppWrapper;\n"]},"metadata":{},"sourceType":"module"}