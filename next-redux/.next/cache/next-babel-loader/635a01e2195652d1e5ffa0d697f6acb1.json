{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { makeAutoObservable } from 'mobx';\n\nclass SampleStore {\n  constructor() {\n    _defineProperty(this, \"counter\", 0);\n\n    _defineProperty(this, \"startTime\", new Date());\n\n    makeAutoObservable(this);\n  }\n\n  get elapsedTime() {\n    return new Date() - this.startTime + ' milliseconds';\n  }\n\n  increment() {\n    this.counter++;\n    return this.counter;\n  }\n\n  decrement() {\n    this.counter--;\n    return this.counter;\n  }\n\n}\n\nexport default SampleStore; // export function createSampleStore() {\n//   return {\n//     counter: 0,\n//     increment() {\n//       this.counter++;\n//       return this.counter;\n//     },\n//     decrement() {\n//       this.counter++;\n//       return this.counter;\n//     },\n//     elapsedTime() {\n//       return this.current - this.start + 'milliseconds';\n//     },\n//   };\n// }","map":{"version":3,"sources":["/Users/yonatanmk/projects/next/next-mobx/stores/SampleStore/index.js"],"names":["makeAutoObservable","SampleStore","constructor","Date","elapsedTime","startTime","increment","counter","decrement"],"mappings":";;AAAA,SAASA,kBAAT,QAAmC,MAAnC;;AAEA,MAAMC,WAAN,CAAkB;AAIhBC,EAAAA,WAAW,GAAG;AAAA,qCAHJ,CAGI;;AAAA,uCAFF,IAAIC,IAAJ,EAEE;;AACZH,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD;;AAEc,MAAXI,WAAW,GAAG;AAChB,WAAO,IAAID,IAAJ,KAAa,KAAKE,SAAlB,GAA8B,eAArC;AACD;;AAEDC,EAAAA,SAAS,GAAG;AACV,SAAKC,OAAL;AACA,WAAO,KAAKA,OAAZ;AACD;;AAEDC,EAAAA,SAAS,GAAG;AACV,SAAKD,OAAL;AACA,WAAO,KAAKA,OAAZ;AACD;;AApBe;;AAuBlB,eAAeN,WAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { makeAutoObservable } from 'mobx';\n\nclass SampleStore {\n  counter = 0;\n  startTime = new Date();\n\n  constructor() {\n    makeAutoObservable(this);\n  }\n\n  get elapsedTime() {\n    return new Date() - this.startTime + ' milliseconds';\n  }\n\n  increment() {\n    this.counter++;\n    return this.counter;\n  }\n\n  decrement() {\n    this.counter--;\n    return this.counter;\n  }\n}\n\nexport default SampleStore;\n\n// export function createSampleStore() {\n//   return {\n//     counter: 0,\n//     increment() {\n//       this.counter++;\n//       return this.counter;\n//     },\n//     decrement() {\n//       this.counter++;\n//       return this.counter;\n//     },\n//     elapsedTime() {\n//       return this.current - this.start + 'milliseconds';\n//     },\n//   };\n// }\n"]},"metadata":{},"sourceType":"module"}