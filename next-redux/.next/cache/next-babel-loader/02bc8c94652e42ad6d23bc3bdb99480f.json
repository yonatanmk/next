{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/Users/yonatanmk/projects/next/next-redux/pages/_app.js\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport App from \"next/app\";\n\nvar AppWrapper = /*#__PURE__*/function (_App) {\n  _inherits(AppWrapper, _App);\n\n  var _super = _createSuper(AppWrapper);\n\n  function AppWrapper() {\n    _classCallCheck(this, AppWrapper);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(AppWrapper, [{\n    key: \"render\",\n    value: // static async getInitialProps(appContext) {\n    //   console.log(\"getInitialProps ------------\");\n    //   // On server-side, this runs once and creates new stores\n    //   // On client-side, this always reuses existing stores\n    //   // const mobxStores = getStores();\n    //   // Make stores available to page's `getInitialProps`\n    //   appContext.ctx.store = store;\n    //   // Call \"super\" to run page's `getInitialProps`\n    //   const appProps = await App.getInitialProps(appContext);\n    //   // Gather serialization-friendly data from stores\n    //   // const initialData = {\n    //   //   postStoreInitialData: mobxStores.postStore.__data(),\n    //   // };\n    //   // Send it to `render`\n    //   // return {\n    //   //   ...appProps,\n    //   //   initialData,\n    //   // };\n    //   return store;\n    // }\n    function render() {\n      var _this$props = this.props,\n          Component = _this$props.Component,\n          pageProps = _this$props.pageProps,\n          initialData = _this$props.initialData; // During SSR, this will create new store instances so having `initialData` is crucial.\n      // During the client-side hydration, same applies.\n      // From then on, calls to `getStores()` return existing instances.\n      // const stores = getStores(initialData);\n\n      return __jsx(StoreContext.Provider, {\n        value: store,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 7\n        }\n      }, __jsx(Component, _extends({}, pageProps, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 9\n        }\n      }))); // return (\n      //   <StoreProvider>\n      //     <Component {...pageProps} />\n      //   </StoreProvider>\n      // );\n    }\n  }]);\n\n  return AppWrapper;\n}(App);\n\nexport default AppWrapper;","map":{"version":3,"sources":["/Users/yonatanmk/projects/next/next-redux/pages/_app.js"],"names":["React","App","AppWrapper","props","Component","pageProps","initialData","store"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,UAAhB;;IAEMC,U;;;;;;;;;;;;;WACJ;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,sBAAS;AACP,wBAA8C,KAAKC,KAAnD;AAAA,UAAQC,SAAR,eAAQA,SAAR;AAAA,UAAmBC,SAAnB,eAAmBA,SAAnB;AAAA,UAA8BC,WAA9B,eAA8BA,WAA9B,CADO,CAGP;AACA;AACA;AACA;;AAEA,aACE,MAAC,YAAD,CAAc,QAAd;AAAuB,QAAA,KAAK,EAAEC,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,MAAC,SAAD,eAAeF,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF,CADF,CARO,CAcP;AACA;AACA;AACA;AACA;AACD;;;;EA7CsBJ,G;;AAgDzB,eAAeC,UAAf","sourcesContent":["import React from \"react\";\nimport App from \"next/app\";\n\nclass AppWrapper extends App {\n  // static async getInitialProps(appContext) {\n  //   console.log(\"getInitialProps ------------\");\n  //   // On server-side, this runs once and creates new stores\n  //   // On client-side, this always reuses existing stores\n  //   // const mobxStores = getStores();\n\n  //   // Make stores available to page's `getInitialProps`\n  //   appContext.ctx.store = store;\n\n  //   // Call \"super\" to run page's `getInitialProps`\n  //   const appProps = await App.getInitialProps(appContext);\n\n  //   // Gather serialization-friendly data from stores\n  //   // const initialData = {\n  //   //   postStoreInitialData: mobxStores.postStore.__data(),\n  //   // };\n\n  //   // Send it to `render`\n  //   // return {\n  //   //   ...appProps,\n  //   //   initialData,\n  //   // };\n  //   return store;\n  // }\n\n  render() {\n    const { Component, pageProps, initialData } = this.props;\n\n    // During SSR, this will create new store instances so having `initialData` is crucial.\n    // During the client-side hydration, same applies.\n    // From then on, calls to `getStores()` return existing instances.\n    // const stores = getStores(initialData);\n\n    return (\n      <StoreContext.Provider value={store}>\n        <Component {...pageProps} />\n      </StoreContext.Provider>\n    );\n\n    // return (\n    //   <StoreProvider>\n    //     <Component {...pageProps} />\n    //   </StoreProvider>\n    // );\n  }\n}\n\nexport default AppWrapper;\n"]},"metadata":{},"sourceType":"module"}