{"ast":null,"code":"var _jsxFileName = \"/Users/yonatanmk/projects/next/next-mobx/pages/_app.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from \"react\";\nimport App, { Container } from \"next/app\";\nimport { store, StoreProvider } from \"../stores\";\n\nclass CustomApp extends App {\n  static async getInitialProps(appContext) {\n    console.log(\"getInitialProps ------------\"); // On server-side, this runs once and creates new stores\n    // On client-side, this always reuses existing stores\n    // const mobxStores = getStores();\n    // Make stores available to page's `getInitialProps`\n\n    appContext.ctx.store = store; // Call \"super\" to run page's `getInitialProps`\n\n    const appProps = await App.getInitialProps(appContext); // Gather serialization-friendly data from stores\n    // const initialData = {\n    //   postStoreInitialData: mobxStores.postStore.__data(),\n    // };\n    // Send it to `render`\n    // return {\n    //   ...appProps,\n    //   initialData,\n    // };\n\n    return store;\n  }\n\n  render() {\n    const {\n      Component,\n      pageProps,\n      initialData\n    } = this.props; // During SSR, this will create new store instances so having `initialData` is crucial.\n    // During the client-side hydration, same applies.\n    // From then on, calls to `getStores()` return existing instances.\n\n    const stores = getStores(initialData);\n    return __jsx(StoreProvider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 7\n      }\n    }, __jsx(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }\n    }, __jsx(Component, _extends({}, pageProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }\n    }))));\n  }\n\n}\n\nexport default CustomApp;","map":{"version":3,"sources":["/Users/yonatanmk/projects/next/next-mobx/pages/_app.js"],"names":["React","App","Container","store","StoreProvider","CustomApp","getInitialProps","appContext","console","log","ctx","appProps","render","Component","pageProps","initialData","props","stores","getStores"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,IAAcC,SAAd,QAA+B,UAA/B;AAEA,SAASC,KAAT,EAAgBC,aAAhB,QAAqC,WAArC;;AAEA,MAAMC,SAAN,SAAwBJ,GAAxB,CAA4B;AACE,eAAfK,eAAe,CAACC,UAAD,EAAa;AACvCC,IAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EADuC,CAEvC;AACA;AACA;AAEA;;AACAF,IAAAA,UAAU,CAACG,GAAX,CAAeP,KAAf,GAAuBA,KAAvB,CAPuC,CASvC;;AACA,UAAMQ,QAAQ,GAAG,MAAMV,GAAG,CAACK,eAAJ,CAAoBC,UAApB,CAAvB,CAVuC,CAYvC;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AACA,WAAOJ,KAAP;AACD;;AAEDS,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,SAAF;AAAaC,MAAAA,SAAb;AAAwBC,MAAAA;AAAxB,QAAwC,KAAKC,KAAnD,CADO,CAGP;AACA;AACA;;AACA,UAAMC,MAAM,GAAGC,SAAS,CAACH,WAAD,CAAxB;AAEA,WACE,MAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,SAAD,eAAeD,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADF,CADF,CADF;AAOD;;AAzCyB;;AA4C5B,eAAeT,SAAf","sourcesContent":["import React from \"react\";\nimport App, { Container } from \"next/app\";\n\nimport { store, StoreProvider } from \"../stores\";\n\nclass CustomApp extends App {\n  static async getInitialProps(appContext) {\n    console.log(\"getInitialProps ------------\");\n    // On server-side, this runs once and creates new stores\n    // On client-side, this always reuses existing stores\n    // const mobxStores = getStores();\n\n    // Make stores available to page's `getInitialProps`\n    appContext.ctx.store = store;\n\n    // Call \"super\" to run page's `getInitialProps`\n    const appProps = await App.getInitialProps(appContext);\n\n    // Gather serialization-friendly data from stores\n    // const initialData = {\n    //   postStoreInitialData: mobxStores.postStore.__data(),\n    // };\n\n    // Send it to `render`\n    // return {\n    //   ...appProps,\n    //   initialData,\n    // };\n    return store;\n  }\n\n  render() {\n    const { Component, pageProps, initialData } = this.props;\n\n    // During SSR, this will create new store instances so having `initialData` is crucial.\n    // During the client-side hydration, same applies.\n    // From then on, calls to `getStores()` return existing instances.\n    const stores = getStores(initialData);\n\n    return (\n      <StoreProvider>\n        <Container>\n          <Component {...pageProps} />\n        </Container>\n      </StoreProvider>\n    );\n  }\n}\n\nexport default CustomApp;\n"]},"metadata":{},"sourceType":"module"}